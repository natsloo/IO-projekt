//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : Katalog.h
//  @ Date : 05.05.2025
//  @ Author : 
//
//


#if !defined(_KATALOG_H)
#define _KATALOG_H

#include <vector>
#include <memory>
#include <fstream>
#include <sstream>
#include <string>
#include <cmath>
#include "KatalogDlaGosci.h"
#include "KatalogDlaPracownikow.h"
#include "Data.h"
#include "Rezerwacja.h"
#include "Pokoj.h"
#include "DodatkowaUsluga.h"
#include "Ekran.h"

class Katalog : public KatalogDlaGosci, public KatalogDlaPracownikow {
private:
	std::vector<std::shared_ptr<Pokoj>> pokoje;
	std::vector<DodatkowaUsluga> uslugi;
	
	Katalog();

	Katalog(const Katalog&) = delete;
	Katalog& operator=(const Katalog&) = delete;
	void wczytaj_pokoje();
	void wczytaj_uslugi();
	void zapisz_pokoje();
	void zapisz_uslugi();

public:
	~Katalog() = default;
	static std::shared_ptr<Katalog> pobierzInstancje();

	std::vector<short> filtruj_wg_daty(Data data) override;
	std::vector<short> filtruj_wg_ceny(double min, double max) override;
	std::vector<short> filtruj_wg_ilosci_osob(int ilosc) override;
	std::vector<short> filtruj_wg_standardu(std::string standard) override;
	Rezerwacja zarezerwuj(std::string uzytkownik, Data data_przyjazdu, Data data_wymeldowania, int pokoj, std::vector<short> uslugi) override;
	void dodaj_pokoj() override;
	void edytuj_pokoj() override;
	void usun_pokoj() override;
	void dodaj_usluge() override;
	void edytuj_usluge() override;
	void usun_usluge() override;

	int get_ilosc_pokoi() override;
	std::string get_opis(int indeks) override;
	int get_ilosc_uslug() override;
	std::string get_opis_uslugi(int indeks) override;
};

#endif  //_KATALOG_H
