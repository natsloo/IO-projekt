//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : Gosc.cpp
//  @ Date : 05.05.2025
//  @ Author : 
//
//


#define STRZALKI -32
#define GORA 72
#define DOL 80
#define LEWO 75
#define PRAWO 77
#define ESC 27
#define ENTER 13



#include "Gosc.h"

Gosc::Gosc() {}

void Gosc::przegladaj_katalog() 
{
    system("cls");
    auto katalog = KatalogDlaGosci::pobierzInstancjeGosc();
    bool rysuj = true;
    int wybor = 0;
    int start = 0;
    int ilosc = 10;
    int stop = min(start + ilosc, katalog->get_ilosc_pokoi());
    std::vector<short> indeksy;
    for (int i = start; i < stop; i++)
    {
        indeksy.push_back(i);
    }
    while (true)
    {
        if (rysuj)
        {
            std::cout << "\033[" << 0 << ";" << 0 << "H";
            std::cout << "ESC - wyjscie z katlogu\n";
            std::cout << "F - wybierz filtry\n";
            std::cout << "ENTER - wybierz pokoj do rezerwacji\n\n";
            for (int i = start; i < stop; i++)
            {
                std::cout << i << ". " << (wybor == i ? "\033[38;5;0;48;5;15m" : "") << katalog->get_opis(indeksy[i]) << "\x1b[0m          \n";
            }
            rysuj = false;
        }
        char klawisz = Ekran::klawisz(); //przeniesc wywolanie funkcji do switch
        switch (klawisz) 
        {
        case STRZALKI:
        {
            switch (Ekran::klawisz())
            {
            case GORA:
            {
                if (wybor)
                {
                    wybor--;
                    rysuj = true;
                    if (wybor-start < 1)
                    {
                        if (start > 0)
                        {
                            start--;
                            stop--;
                        }
                    }
                }
                break;
            }
            case DOL:
            {
                if (wybor < katalog->get_ilosc_pokoi()-3) //zmienic
                {
                    wybor++;
                    rysuj = true;
                    if (stop-wybor < 2)  
                    {
                        if (stop < katalog->get_ilosc_pokoi() - 2) //zmienic
                        {
                            start++;
                            stop++;
                        }
                    }
                }
                break;
            }
            default:
                break;
            }
            break;
        }
        case ESC:
        {
            system("cls");
            return;
        }
        case ENTER:
        {
            //tu bêdzie rezerwowanie
            break;
        }
        case 'f':
        case 'F':
        {
            indeksy = filtruj();
            rysuj = true;
            system("cls");
            break;
        }
        default:
            if (klawisz != 0)
                std::cout << "Nieznany klawisz: " << (int)klawisz << std::endl; //usun¹æ
            break;
        }
    }
}

std::vector<short> polacz_wyniki_filtrow(std::vector<short> v1, std::vector<short> v2)
{
    std::vector<short> wynik;

    for (const auto& p1 : v1)
    {
        for (const auto& p2 : v2)
        {
            if (p1 == p2)
            {
                wynik.push_back(p1);
                break;
            }
        }
    }
    return wynik;
}

std::vector<short> Gosc::filtruj()  //dodaæ ¿eby min nie mog³o byæ wiêksze ni¿ max 
{
    
    auto katalog = KatalogDlaGosci::pobierzInstancjeGosc();
    system("cls");
    std::vector<short> wyniki;
    int min_liczba_osob=1;
    Data data_przyjazdu = Data::dzis();
    Data data_wymeldowania = Data::dzis() + 1;
    int min_cena_noc = 0;
    int max_cena_noc = 1000;
    std::vector<std::string> standard = { "family", "basic", "komfort", "apartament", "deluxe" };
    bool rysuj = true;
    int wybor = 0, wybor_standard=0;
    while (true)
    {
        if (rysuj)
        {
            
            std::cout << "\033[" << 0 << ";" << 0 << "H";
            std::cout << "R - resetuj wszystkie filtry\n";
            std::cout << "ENTER - zatwierdz filtry\n\n\n";
            std::cout << "Minimalna liczba osob: " << (wybor == 0 ? "\033[38;5;0;48;5;15m" : "") << min_liczba_osob << "\x1b[0m          \n";
            std::cout << "Data przyjazdu: " << (wybor == 1 ? "\033[38;5;0;48;5;15m" : "") << data_przyjazdu.string() << "\x1b[0m          \n";
            std::cout << "Data wymeldowania: " << (wybor == 2 ? "\033[38;5;0;48;5;15m" : "") << data_wymeldowania.string() << "\x1b[0m          \n";
            std::cout << "Minimalna cena za noc: " << (wybor == 3 ? "\033[38;5;0;48;5;15m" : "") << min_cena_noc << "\x1b[0m          \n";
            std::cout << "Maksymalna cena za noc: " << (wybor == 4 ? "\033[38;5;0;48;5;15m" : "") << max_cena_noc << "\x1b[0m          \n";
            std::cout << "Standard: " << (wybor == 5 ? "\033[38;5;0;48;5;15m" : "") << standard[wybor_standard] << "\x1b[0m          \n";
            rysuj = false;
        }
        switch (Ekran::klawisz())
        {
        case STRZALKI:
        {
            rysuj = true;
            switch (Ekran::klawisz())
            {
            case GORA:
            {
                if (wybor)
                    wybor--;
                break;
            }
            case DOL:
            {
                if (wybor < 5)
                    wybor++;
                break;
            }
            case LEWO:
            {
                switch (wybor)
                {
                case 0:
                {
                    if (min_liczba_osob > 1)
                        min_liczba_osob--;
                    break;
                }
                case 1:
                {
                    data_przyjazdu = data_przyjazdu - 1;
                    break;
                }
                case 2:
                {
                    data_wymeldowania = data_wymeldowania - 1;
                    break;
                }
                case 3:
                {
                    if (min_cena_noc > 50)
                        min_cena_noc-=50;
                    break;
                }
                case 4:
                {
                    if (max_cena_noc > 200)
                        max_cena_noc-=50;
                    break;
                }
                case 5:
                {
                    if (wybor_standard)
                        wybor_standard--;
                }
                default:
                    break;
                }
                break;
            }
            case PRAWO:
            {
                switch (wybor)
                {
                case 0:
                {
                    if (min_liczba_osob < 6)
                        min_liczba_osob++;
                    break;
                }
                case 1:
                {
                    data_przyjazdu = data_przyjazdu + 1;
                    break;
                }
                case 2:
                {
                    data_wymeldowania = data_wymeldowania + 1;
                    break;
                }
                case 3:
                {
                    if (min_cena_noc < 1000)
                        min_cena_noc += 50;
                    break;
                }
                case 4:
                {
                    if (max_cena_noc < 1000)
                        max_cena_noc += 50;
                    break;
                }
                case 5:
                {
                    if (wybor_standard < standard.size()-1)
                        wybor_standard++;
                }
                default:
                    break;
                }
                break;
            }
            default:
                break;
            }
            break;
        }
        case ENTER:
        {
            system("cls");
            auto v1 = katalog->filtruj_wg_ceny(min_cena_noc, max_cena_noc);
            auto v2 = katalog->filtruj_wg_ilosci_osob(min_liczba_osob);
            auto v3 = katalog->filtruj_wg_standardu(standard[wybor_standard]);
            wyniki = polacz_wyniki_filtrow(v1, v2);
            wyniki = polacz_wyniki_filtrow(wyniki, v3);
            //for (Data d = data_przyjazdu; d <= data_wymeldowania; d++)
            //{
            //    auto v4 = katalog->filtruj_wg_daty(d);
            //    wyniki = polacz_wyniki_filtrow(wyniki, v4);
            //}
            

            return wyniki;
        }
        case 'r':
        case 'R':
        {
            for (int i = 0; i < katalog->get_ilosc_pokoi(); i++)
            {
                wyniki.push_back(i);
            }
            return wyniki;
        }
        default:
            break;
        }
    }

}

void Gosc::przegladaj_historie_rezerwacji()
{

}

void Gosc::gui() {
    
    system("cls");
    //system("clear");
    int a;
    do {
        std::cout << "1. Pokaz katalog.\n2. Pokaz historie rezerwacji.\n3. Wyloguj sie.\n";
        std::cin >> a;
        if (std::cin.fail()) {
            std::cin.clear();
            std::cin.ignore(1000, '\n');
        }
        if (a == 1) {
            przegladaj_katalog();
        }
        if (a == 2) {
            przegladaj_historie_rezerwacji();
        }
        if (a == 3) {
            wyloguj();
            break;
        }
    } while (true);
}

