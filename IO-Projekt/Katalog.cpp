//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : Katalog.cpp
//  @ Date : 05.05.2025
//  @ Author : 
//
//


#include "Katalog.h"
#include "Data.h"
#include "Rezerwacja.h"

Katalog::Katalog()
{
    wczytaj_pokoje();
    wczytaj_uslugi();
}

DodatkowaUsluga parse_csv_uslugi(std::string& linia) {
    std::stringstream ss(linia);
    std::string token;

    std::getline(ss, token, ',');
    std::string nazwa = token;

    std::getline(ss, token, ',');
    int cena = stoi(token);

    return DodatkowaUsluga(nazwa, cena);
}

std::shared_ptr<Pokoj> parse_csv_pokoj(std::string& linia) {
    std::stringstream ss(linia);
    std::string token;

    std::getline(ss, token, ',');
    int numer = stoi(token);

    std::getline(ss, token, ',');
    int maks_liczba_os = stoi(token);

    std::getline(ss, token, ',');
    double cena_noc = stod(token);

    std::getline(ss, token, ',');
    std::string standard = token;

    std::shared_ptr<Pokoj> p(new Pokoj(numer, maks_liczba_os, cena_noc, standard));
    return p;

}

void Katalog::wczytaj_pokoje() {
    std::ifstream plik("dane/pokoje.csv");
    std::string linia;
    //std::getline(plik, linia);
    while (std::getline(plik, linia)) {
        this->pokoje.push_back(parse_csv_pokoj(linia));
    }
}

void Katalog::wczytaj_uslugi() {
    std::ifstream plik("dane/uslugi.csv");
    std::string linia;
    //std::getline(plik, linia);
    while (std::getline(plik, linia)) {
        this->uslugi.push_back(parse_csv_uslugi(linia));
    }
}

void Katalog::zapisz_pokoje() {
    std::ofstream p("dane/pokoje.csv", std::ios::out);
    std::string linia;
    for (auto& pokoj : pokoje) {
        linia = pokoj->linia();
        p << linia << "\n";
    }
}

void Katalog::zapisz_uslugi() {
    std::ofstream p("dane/uslugi.csv", std::ios::out);
    std::string linia;
    for (auto& usluga : uslugi) {
        linia = usluga.linia();
        p << linia << "\n";
    }
}

std::shared_ptr<Katalog> Katalog::pobierzInstancje() {
    static std::shared_ptr<Katalog> instancja(new Katalog());
    return instancja;
}

std::shared_ptr<KatalogDlaGosci> KatalogDlaGosci::pobierzInstancjeGosc() {
    return Katalog::pobierzInstancje();
}

std::vector<std::shared_ptr<Pokoj>> Katalog::filtruj_wg_daty(Data data)
{
    return std::vector<std::shared_ptr<Pokoj>>();
}

std::vector<std::shared_ptr<Pokoj>> Katalog::filtruj_wg_ceny(double min, double max)
{
    return std::vector<std::shared_ptr<Pokoj>>();
}

std::vector<std::shared_ptr<Pokoj>> Katalog::filtruj_wg_ilosci_osob(int ilosc)
{
    return std::vector<std::shared_ptr<Pokoj>>();
}

std::vector<std::shared_ptr<Pokoj>> Katalog::filtruj_wg_standardu()
{
    return std::vector<std::shared_ptr<Pokoj>>();
}

Rezerwacja Katalog::zarezerwuj() 
{
	return Rezerwacja();
}

void Katalog::dodaj_pokoj() 
{

    zapisz_pokoje();
}

void Katalog::edytuj_pokoj() 
{
    zapisz_pokoje();
}

void Katalog::usun_pokoj() 
{
    zapisz_pokoje();
}

void Katalog::dodaj_usluge() 
{
    zapisz_uslugi();
}

void Katalog::edytuj_usluge() 
{
    zapisz_uslugi();
}

void Katalog::usun_usluge() 
{
    zapisz_uslugi();
}

int Katalog::get_ilosc_pokoi()
{
    return pokoje.size();
}

std::string Katalog::get_opis(int indeks)
{
    if ((indeks < 0) || (indeks > pokoje.size()-1))
    {
        return "error";
    }
    return pokoje[indeks]->opis();
}
