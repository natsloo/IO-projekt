//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : Uzytkownik.cpp
//  @ Date : 05.05.2025
//  @ Author : 
//
//


#include "Uzytkownik.h"

#define STRZALKI -32
#define GORA 72
#define DOL 80
#define LEWO 75
#define PRAWO 77
#define ESC 27
#define ENTER 13


Uzytkownik::Uzytkownik() 
{

}

std::pair<std::string, std::string> parse_csv(std::string& linia);

std::pair<bool, std::string> czy_istnieje_taki_user(std::string login) {
	std::pair<bool, std::string> result;
	std::string plik[] = { "dane/pracownicy.csv","dane/goscie.csv" };
	for (int i = 0; i < 2; i++) {
		std::ifstream p(plik[i]);
		std::string linia;
		while (std::getline(p, linia)) {
			std::pair<std::string, std::string> creds = parse_csv(linia);
			if (creds.first == login) {
				result.first = true;
				result.second = "";
				p.close();
				return result;
			}
		}
		p.close();
	}
	result.first = false;
	result.second = "Nie ma takiego uzytkownika. Sprobuj ponownie.\n";
	return result;
}

void Uzytkownik::wyslij_wiadomosc() 
{
	std::string adresat;
	std::pair<bool, std::string> result;
	do {
		std::cout << "Podaj odbiorce.\n";
		std::cin >> adresat;
		std::cin.ignore();
		result = czy_istnieje_taki_user(adresat);
		std::cout << result.second;
	} while (result.first != true);
	std::string temat;
	bool tematlen = false;
	do {
		std::cout << "Podaj temat. Nie moze byc dluzszy niz 30 znakow.\n";
		std::getline(std::cin, temat);
		if (temat.length() <= 30) {
			tematlen = true;
		}
		else {
			std::cout << "Temat dluzszy niz 30 znakow!\n";
		}
	} while (!tematlen);
	std::cout << "Podaj tresc wiadomosci. Linia zawierajaca tylko kropke konczy pisanie wiadomosci.\n";
	std::string linia;
	std::vector<std::string> tresc;
	while (true) {
		std::getline(std::cin, linia);
		if (linia == ".") {
			break;
		}
		tresc.push_back(linia);
	}
	Wiadomosc w(login, adresat, temat, tresc, Data::dzis_timestamp(), true);
}

std::string spacja(int naj) {
	std::string s = "";
	for (int i = 0; i < naj; i++) {
		s += " ";
	}
	return s;
}

void Uzytkownik::przegladaj_wyslane_wiadomosci() 
{
	system("cls");

	int najdluzszy = 0;
	int najad = 0;
	for (auto& w : wyslane_wiadomosci) {
		if (w.getTemat().length() > najdluzszy) {
			najdluzszy = w.getTemat().length();
		}
		if (w.getAdresat().length() > najad) {
			najad = w.getAdresat().length();
		}
	}

	bool rysuj = true;
	int wybor = 0;
	int start = 0;
	int ilosc = 10;
	int stop = min(start + ilosc, wyslane_wiadomosci.size()); 

	while (true)
	{
		if (rysuj)
		{
			std::cout << "\033[" << 0 << ";" << 0 << "H";
			std::cout << "ESC - powrot do menu\n";
			std::cout << "STRZALKI - przechodzenie po wiadomosciach\n";
			std::cout << "ENTER - wybierz wiadomosc do przeczytania\n\n";
			if (wyslane_wiadomosci.size() == 0) 
			{
				std::cout << "Brak wynikow :(\n";
			}
			for (int i = start; i < stop; i++)
			{
				std::cout << i << ". " << (wybor == i ? "\033[38;5;0;48;5;15m" : "") 
					<< wyslane_wiadomosci[i].getAdresat() << spacja(najad - wyslane_wiadomosci[i].getAdresat().length() + 4) << wyslane_wiadomosci[i].getTemat()
					<< spacja(najdluzszy - wyslane_wiadomosci[i].getTemat().length() + 4)
					<< Data::data_na_string(wyslane_wiadomosci[i].getDataWyslania()) 
					<< "\t" << "\x1b[0m          \n";
			}
			rysuj = false;
		}
		switch (Ekran::klawisz())
		{
		case STRZALKI:
		{
			rysuj = true;
			switch (Ekran::klawisz())
			{
			case GORA:
			{
				if (wybor)
				{
					wybor--;
					if (wybor - start < 1)
					{
						if (start > 0)
						{
							start--;
							stop--;
						}
					}
				}
				break;
			}
			case DOL:
			{
				if (wybor < wyslane_wiadomosci.size() - 1)
				{
					wybor++;
					if (stop - wybor < 2)
					{
						if (stop < wyslane_wiadomosci.size())
						{
							start++;
							stop++;
						}
					}
				}
				break;
			}
			default:
				break;
			}
			break;
		}
		case ESC:
		{
			system("cls");
			return;
		}
		case ENTER:
		{
			if (wyslane_wiadomosci.size() == 0) 
			{
				break;
			}
			system("cls");
			std::cout << "Data wyslania : " << Data::data_na_string(wyslane_wiadomosci[wybor].getDataWyslania()) << "\n";
			std::cout << "Nadwaca: " << wyslane_wiadomosci[wybor].getNadawca() << "\t" << "Adresat: " << wyslane_wiadomosci[wybor].getAdresat() << "\n";
			std::cout << "Temat: " << wyslane_wiadomosci[wybor].getTemat() << "\n-----------------------------------------------------\nTresc:\n\n";
			for (auto& l : wyslane_wiadomosci[wybor].getTresc()) {
				std::cout << l << "\n";
			}
			std::cout << "\n";
			system("pause");
			system("cls");
			rysuj = true;
			break;
		}
		default:
			break;
		}
	}
}

void Uzytkownik::przegladaj_odebrane_wiadomosci() {

	system("cls");

	int najdluzszy = 0;
	int najad = 0;
	for (auto& w : odebrane_wiadomosci) {
		if (w.getTemat().length() > najdluzszy) {
			najdluzszy = w.getTemat().length();
		}
		if (w.getAdresat().length() > najad) {
			najad = w.getAdresat().length();
		}
	}

	bool rysuj = true;
	int wybor = 0;
	int start = 0;
	int ilosc = 10;
	int stop = min(start + ilosc, odebrane_wiadomosci.size());

	while (true)
	{
		if (rysuj)
		{
			std::cout << "\033[" << 0 << ";" << 0 << "H";
			std::cout << "ESC - powrot do menu\n";
			std::cout << "STRZALKI - przechodzenie po wiadomosciach\n";
			std::cout << "ENTER - wybierz wiadomosc do przeczytania\n\n";
			if (odebrane_wiadomosci.size() == 0) 
			{
				std::cout << "Brak wynikow :(\n";
			}
			for (int i = start; i < stop; i++)
			{
				std::cout << i << ". " << (wybor == i ? "\033[38;5;0;48;5;15m" : "") << odebrane_wiadomosci[i].getNadawca() << spacja(najad - odebrane_wiadomosci[i].getAdresat().length() + 4) << odebrane_wiadomosci[i].getTemat()
					<< spacja(najdluzszy - odebrane_wiadomosci[i].getTemat().length() + 4)
					<< Data::data_na_string(odebrane_wiadomosci[i].getDataWyslania())
					<< "\t" << "\x1b[0m          \n";
			}
			rysuj = false;
		}
		switch (Ekran::klawisz())
		{
		case STRZALKI:
		{
			rysuj = true;
			switch (Ekran::klawisz())
			{
			case GORA:
			{
				if (wybor)
				{
					wybor--;
					if (wybor - start < 1)
					{
						if (start > 0)
						{
							start--;
							stop--;
						}
					}
				}
				break;
			}
			case DOL:
			{
				if (wybor < odebrane_wiadomosci.size() - 1)
				{
					wybor++;
					if (stop - wybor < 2)
					{
						if (stop < odebrane_wiadomosci.size())
						{
							start++;
							stop++;
						}
					}
				}
				break;
			}
			default:
				break;
			}
			break;
		}
		case ESC:
		{
			system("cls");
			return;
		}
		case ENTER:
		{
			if (odebrane_wiadomosci.size() == 0)
			{
				break;
			}
			system("cls");
			std::cout << "Data wyslania : " << Data::data_na_string(odebrane_wiadomosci[wybor].getDataWyslania()) << "\n";
			std::cout << "Nadwaca: " << odebrane_wiadomosci[wybor].getNadawca() << "\t" << "Adresat: " << odebrane_wiadomosci[wybor].getAdresat() << "\n";
			std::cout << "Temat: " << odebrane_wiadomosci[wybor].getTemat() << "\n-----------------------------------------------------\nTresc:\n\n";
			for (auto& l : odebrane_wiadomosci[wybor].getTresc()) {
				std::cout << l << "\n";
			}
			std::cout << "\n";
			system("pause");
			system("cls");
			rysuj = true;
			break;
		}
		default:
			break;
		}
	}
}

std::pair<std::string, std::string> parse_csv(std::string& linia) {
	std::stringstream ss(linia);
	std::string token;

	std::getline(ss, token, ',');
	std::string login = token;

	std::getline(ss, token, ',');
	std::string haslo = token;

	std::pair<std::string, std::string> creds;
	creds.first = login;
	creds.second = haslo;
	return creds;
}

std::pair<bool,std::string> sprawdz_login(std::string login) {
	std::string plik[] = { "dane/pracownicy.csv","dane/goscie.csv" };
	for (int i = 0; i < 2; i++) {
		std::ifstream p(plik[i]);
		std::string linia;
		while (std::getline(p, linia)) {
			std::pair<std::string, std::string> creds = parse_csv(linia);
			if (creds.first == login) {
				std::pair<bool, std::string> result;
				result.first = false;
				result.second = "Ten login jest juz zajety.\n";
				p.close();
				return result;
			}
		}
		p.close();
	}
	std::pair<bool, std::string> result;
	std::regex wzorzec("[a-zA-Z0-9]{3,}");
	if (std::regex_match(login, wzorzec)) {
		result.first = true;
		result.second = "";
		return result;
	}
	result.first = false;
	result.second = "Login nie spelnia warunkow. Sprobuj ponownie.\n";
	return result;
}

std::pair<bool, std::string> sprawdz_haslo(std::string haslo) {
	std::pair<bool, std::string> result;
	std::regex wzorzec("[^,]{8,}");
	if (std::regex_match(haslo, wzorzec)) {
		result.first = true;
		result.second = "";
		return result;
	}
	result.first = false;
	result.second = "Haslo nie spelnia warunkow. Sprobuj ponownie.\n";
	return result;
}

bool Uzytkownik::zaloguj(std::string plik) 
{
	std::cout << "Podaj login.\n";
	std::string login;
	std::cin >> login;
	std::cout << "Podaj haslo.\n";
	std::string haslo;
	std::cin >> haslo;
	std::ifstream p(plik);
	std::string linia;
	while (std::getline(p, linia)) {
		std::pair<std::string, std::string> creds = parse_csv(linia);
		if (creds.first == login && creds.second == haslo) {
			this->login = login;
			this->haslo = haslo;
			p.close();
			return true;
		}
	}
	p.close();
	return false;
}

void Uzytkownik::wyloguj() 
{
	this->login = "";
	this->haslo = "";
}

void Uzytkownik::zarejestruj(std::string plik)
{
	std::pair<bool, std::string> result;
	result.first = false;
	result.second = "";
	std::string login, haslo;
	do {
		std::cout << "Podaj login. Musi miec przynajmniej 3 znaki. Dozwolone znaki to male i duze litery oraz cyfry.\n";
		std::cin >> login;
		//std::cout <<"\nlogin: "<< login;
		result = sprawdz_login(login);
		std::cout << result.second;
	} while (result.first != true);
	result.first = false;
	result.second = "";
	do {
		std::cout << "Podaj haslo. Musi miec przynajmniej 8 znakow. Dozwolone znaki to male i duze litery, cyfry oraz znaki specjalne poza przecinkiem.\n";
		std::cin >> haslo;
		result = sprawdz_haslo(haslo);
		std::cout << result.second;
	} while (result.first != true);
	std::string linia = login + "," + haslo + "\n";
	std::ofstream p(plik, std::ios::app);
	//std::cout << "\n\nDo pliku wrzucam: " << linia << "\n\n";
	p << linia;
	p.close();
	std::cout << "Poprawnie utworzono konto.\nZaloguj sie, by miec dostep do systemu.\n";
}

